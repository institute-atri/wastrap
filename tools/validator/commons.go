package validator

import (
	"strings"

	"github.com/institute-atri/ghttp"
	"github.com/institute-atri/glogger"
)

type communs struct {
	Url   string
	Proxy string

	TOR         bool
	RandomAgent bool
}

// The NewCommons function is responsible for instantiating a set of other functions that have the purpose of checking the existence and availability of access to WordPress common files.
func NewCommons(url, proxy string, tor, randomAgent bool) *communs {
	return &communs{Url: url, Proxy: proxy, TOR: tor, RandomAgent: randomAgent}
}

func (c *communs) PHPDisabled() Interesting {
	var request = ghttp.NewHttp()

	request.SetURL(c.Url + "wp-includes/version.php")

	if c.TOR {
		request.OnTor()
	} else if c.Proxy != "" {
		request.SetProxy(c.Proxy)
	}

	if c.RandomAgent {
		request.OnRandomUserAgent()
	}

	response, err := request.Do()

	if err != nil {
		glogger.Fatal(err)
	}

	var entity = Interesting{BRaw: response.BRaw, FoundBy: "Direct Access"}

	if response.StatusCode == 200 || response.StatusCode == 403 {
		entity.Confidence = 100
	}

	return entity
}

func (c *communs) XMLRPC() Interesting {
	var request = ghttp.NewHttp()

	request.SetURL(c.Url + "xmlrpc.php")

	if c.TOR {
		request.OnTor()
	} else if c.Proxy != "" {
		request.SetProxy(c.Proxy)
	}

	if c.RandomAgent {
		request.OnRandomUserAgent()
	}

	response, err := request.Do()

	if err != nil {
		glogger.Fatal(err)
	}

	var entity = Interesting{BRaw: response.BRaw, FoundBy: "Direct Access"}

	if strings.Contains(response.BRaw, "XML-RPC server accepts POST requests only.") {
		entity.Confidence += 60
	}

	if response.StatusCode == 200 || response.StatusCode == 403 || response.StatusCode == 405 {
		entity.Confidence += 20
	}

	if strings.Contains(response.BRaw, "This error was generated by Mod_Security.") {
		entity.Confidence += 80
	}

	return entity
}

func (c *communs) WPCron() Interesting {
	var request = ghttp.NewHttp()

	request.SetURL(c.Url + "wp-cron.php")

	if c.TOR {
		request.OnTor()
	} else if c.Proxy != "" {
		request.SetProxy(c.Proxy)
	}

	if c.RandomAgent {
		request.OnRandomUserAgent()
	}

	response, err := request.Do()

	if err != nil {
		glogger.Fatal(err)
	}

	var entity = Interesting{BRaw: response.BRaw, FoundBy: "Direct Access"}

	if response.StatusCode == 200 || response.StatusCode == 403 {
		entity.Confidence = 100
	}

	return entity
}
