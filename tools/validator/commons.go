package validator

import (
	"strings"

	"github.com/institute-atri/ghttp"
	"github.com/institute-atri/glogger"
)

type Commons struct {
	Url   string
	Proxy string

	TOR         bool
	RandomAgent bool
}

// NewCommons creates a new instance of the Commons struct with the given parameters.
// The Url parameter is the base URL for the Commons instance.
// The Proxy parameter is the proxy to be used for the requests made by the Commons instance.
// The Tor parameter specifies whether to use TOR for the requests made by the Commons instance.
// The RandomAgent parameter specifies whether to use a random user agent for the requests made by the Commons instance.
// Returns a pointer to the newly created Commons instance.
func NewCommons(url, proxy string, tor, randomAgent bool) *Commons {
	return &Commons{Url: url, Proxy: proxy, TOR: tor, RandomAgent: randomAgent}
}

// PHPDisabled checks if PHP is disabled on the target website.
// It sends a request to the "version.php" file and checks the response status code.
// If the status code is 200 or 403, it indicates that PHP is disabled.
// Otherwise, it returns an Interesting entity with the raw response body and "Direct Access" as the found by source.
// The confidence level is set to 100 if PHP is disabled, otherwise it remains unchanged.
// Returns an Interesting entity.
func (c *Commons) PHPDisabled() Interesting {
	request := ghttp.NewHttp()

	err := request.SetURL(c.Url + "wp-includes/version.php")
	glogger.ErrorHandling(err)

	if c.TOR {
		err := request.OnTor()
		glogger.ErrorHandling(err)
	} else if c.Proxy != "" {
		err := request.SetProxy(c.Proxy)
		glogger.ErrorHandling(err)
	}

	if c.RandomAgent {
		request.OnRandomUserAgent()
	}

	response, err := request.Do()

	if err != nil {
		glogger.Fatal(err)
	}

	entity := Interesting{BRaw: response.BRaw, FoundBy: "Direct Access"}

	if response.StatusCode == 200 || response.StatusCode == 403 {
		entity.Confidence = 100
	}

	return entity
}

// XMLRPC checks if the target website has XML-RPC enabled by sending a request to the "xmlrpc.php" file.
// It returns an Interesting entity with the raw response body and "Direct Access" as the found by source.
// The confidence level is increased based on certain conditions:
// - If the response body contains the message "XML-RPC server accepts POST requests only.", the confidence is increased by 60.
// - If the response status code is 200, 403, or 405, the confidence is increased by 20.
// - If the response body contains the message "This error was generated by Mod_Security.", the confidence is increased by 80.
// Returns an Interesting entity.
func (c *Commons) XMLRPC() Interesting {
	request := ghttp.NewHttp()

	err := request.SetURL(c.Url + "xmlrpc.php")
	glogger.ErrorHandling(err)

	if c.TOR {
		err := request.OnTor()
		glogger.ErrorHandling(err)
	} else if c.Proxy != "" {
		err := request.SetProxy(c.Proxy)
		glogger.ErrorHandling(err)
	}

	if c.RandomAgent {
		request.OnRandomUserAgent()
	}

	response, err := request.Do()
	glogger.ErrorHandling(err)

	entity := Interesting{BRaw: response.BRaw, FoundBy: "Direct Access"}

	if strings.Contains(response.BRaw, "XML-RPC server accepts POST requests only.") {
		entity.Confidence += 60
	}

	if response.StatusCode == 200 || response.StatusCode == 403 || response.StatusCode == 405 {
		entity.Confidence += 20
	}

	if strings.Contains(response.BRaw, "This error was generated by Mod_Security.") {
		entity.Confidence += 80
	}

	return entity
}

// WPCron checks if the WordPress cron system is enabled on the target website.
// It sends a request to the "wp-cron.php" file and checks the response status code.
// If the status code is 200 or 403, it indicates that the WordPress cron system is enabled.
// Otherwise, it returns an Interesting entity with the raw response body and "Direct Access" as the found by source.
// The confidence level is set to 100 if the WordPress cron system is enabled, otherwise it remains unchanged.
// Returns an Interesting entity.
func (c *Commons) WPCron() Interesting {
	request := ghttp.NewHttp()

	err := request.SetURL(c.Url + "wp-cron.php")
	glogger.ErrorHandling(err)

	if c.TOR {
		err := request.OnTor()
		glogger.ErrorHandling(err)
	} else if c.Proxy != "" {
		err := request.SetProxy(c.Proxy)
		glogger.ErrorHandling(err)
	}

	if c.RandomAgent {
		request.OnRandomUserAgent()
	}

	response, err := request.Do()
	glogger.ErrorHandling(err)

	entity := Interesting{BRaw: response.BRaw, FoundBy: "Direct Access"}

	if response.StatusCode == 200 || response.StatusCode == 403 {
		entity.Confidence = 100
	}

	return entity
}
